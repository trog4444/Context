--|--|--|--|--|--|--|--|--|--|--|--|--|--|--


// Functor.map
member Select :
    m<'Source> *
    Func<'Source, 'Result> ->
    m<'Result>
-- {from a in ma select f(a)}


--|--|--|--|--|--|--|--|--|--|--|--|--|--|--


// Applicative.map2
member Join : // not actually used in query syntax, JUST used as map2
    m<'Source1> *
    m<'Source2> *
    Func<'Source1, 'Source2, 'Result> ->
    m<'Result>
member Join :
    m<'T> *
    m<'U> *
    Func<'T, 'K> *
    Func<'U, 'K> *
    Func<'T, 'U, 'V> ->
    m<'V>
-- {from a in ma
    join b in mb on 1 equals 1
    select f(a)}


--|--|--|--|--|--|--|--|--|--|--|--|--|--|--


// Monad.bind
member SelectMany :
    m<'Source> *
    Func<'Source, m<'Result>> ->
    m<'Result>
-- {from a in ma select f(a)}

// Monad.bindMap
member SelectMany :
    m<'Source> *
    Func<'Source, m<'Result>> *
    Func<'Source, 'Result, 'Final> ->
    m<'Final>
-- {from a in ma
    from b in mb
    from c in mc
    select f(a)}


--|--|--|--|--|--|--|--|--|--|--|--|--|--|--


// MonadPlus.'join'
    member GroupJoin : // not used in query syntax
    m<'T> *
    m<'U> *
    Func<'T, 'U, bool> *
    Func<'T, 'U, 'V> ->
    m<'V>
and
    member GroupJoin :
    m<'T> *
    m<'U> *
    Func<'T, 'K> *
    Func<'U, 'K> *
    Func<'T, m<'U>, 'V> ->
    m<'V> when 'K: equality
-- {from a in ma
    join b in mb on 1 equals 1 into mc
    from c in mc
    select f(c)}


// MonadPlus.``some kind of association?``
member GroupBy :
    m<'Source> *
    Func<'Source, 'Key> *
    Func<'Source, 'Element> *
    Func<'Key, m<'Element>, 'Result> ->
    m<'Result> when 'Key: equality
or
member GroupBy : // for non seqs
    m<'Source> *
    Func<'Source, 'Key> *
    Func<'Source, 'Result> ->
    m<struct('Key * 'Result)>
-- {from a in ma
    group a by 1}
-- {from a in ma
    group a by 1 into b // a not in scope
    from c in b
    select f(c)}


// MonadPlus.General.filter
member Where :
    m<'T> *
    Func<'T, bool> ->
    m<'T>
-- {from a in ma
    where a == x
    select f(a)}


//// linq order(ascending|descending)
    //public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, 
    //Func<TSource, TKey> keySelector);

    //// linq order(ascending|descending)
    //public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, 
    //    Func<TSource, TKey> keySelector, 
    //    IComparer<TKey> comparer);