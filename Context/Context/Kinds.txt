namespace PTR.Context._


?[<type-modifiers(Struct, NoComparison, NoEquality, CustomComparison, CustomEquality, CompiledName("name"))>]
summary
type declaration


?rec module (same as type Name) =

    Util = ...

    Primitives ...

    Isomorphisms
        ex: toSeq, ofSeq, etc
     
    Monad
        (unit), bind >>= =<<, flatten, recM, recM1
        ?foldlM, foldrM
        module (?Qualified) Workflow w Builder (extendable)
    -- Plus
        (empty), ?mplus, guard, innerJoin
        -- General
            filter, ?remove, ...
    Applicative
        unit, ap <*> <**> *> <*, map2, andThen
    -- Alternative
        empty, orElse, ..?
    Functor
        map %> <%, ?replace

    Comonad
        extract, extend =>> <<=, duplicate

    Contrafunctor
        contramap

    Profunctor
        dimap, rmap, lmap

    Bifunctor
        bimap, mapFst, mapSnd

    Semigroup
        append ++

    -- Monoid
        (empty), mtimes, mconcat

    Category
        identity, compose

    Arrow ...

    Traversable
        sequence, traverse

    Foldable
        fold, foldBack
        ? mapFold, foldMap
        ? foldl, foldr ('lazy' versions)
        
